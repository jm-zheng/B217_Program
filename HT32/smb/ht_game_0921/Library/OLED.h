//-------------------------------------------------------------------
#ifndef OLED_H
#define OLED_H

#include "HT32IO.h"
#include "Stream.h"

//-------------------------------------------------------------------
//SoftwareSPI Setting Pin
#define OLED_SCL            PB8 //SCK
#define OLED_SDA            PB7 //MOSI
#define OLED_RST            PB6
#define OLED_DC             PC15
#define OLED_CS             PC14

#define OLED_096            0

#define FONT_6x8            0
#define FONT_8x16           1

// OLED GPIO MACROS
#define OLED_COMMAND     		digitalWrite(OLED_DC,LOW)
#define OLED_DATA	 					digitalWrite(OLED_DC,HIGH)
#define OLED_RES_LOW     		digitalWrite(OLED_RST,LOW)
#define OLED_RES_HIGH    		digitalWrite(OLED_RST,HIGH)
#define OLED_SCL_LOW     		digitalWrite(OLED_SCL,LOW)
#define OLED_SCL_HIGH    		digitalWrite(OLED_SCL,HIGH)
#define OLED_SDA_LOW     		digitalWrite(OLED_SDA,LOW)
#define OLED_SDA_HIGH    		digitalWrite(OLED_SDA,HIGH)
#define OLED_CS_LOW     		digitalWrite(OLED_CS,LOW)
#define OLED_CS_HIGH    		digitalWrite(OLED_CS,HIGH)

//  PARAMETERS
#define LCDWIDTH 						128
#define LCDHEIGHT 					64
#define MAXROWS 						7
#define MAXCONTRAST 				0xFF

// command table
#define SETCONTRAST 				0x81
#define DISPLAYALLON_RESUME	0xA4
#define DISPLAYALLON 				0xA5
#define NORMALDISPLAY 			0xA6
#define INVERTDISPLAY 			0xA7
#define DISPLAYOFF 					0xAE
#define DISPLAYON 					0xAF

// scrolling commands
#define ACTIVATE_SCROLL 		0x2F
#define DEACTIVATE_SCROLL 	0x2E
#define SCROLL_RIGHT				0x26
#define SCROLL_LEFT					0X27
#define SCROLL_VERT_RIGHT		0x29
#define SCROLL_VERT_LEFT		0x2A
#define SET_VERTICAL				0xA3

// speed is in number of frames
#define Scroll_2Frames			0x07
#define Scroll_3Frames			0x04
#define Scroll_4Frames			0x05
#define Scroll_5Frames			0x00
#define Scroll_25Frames			0x06
#define Scroll_64Frames			0x01
#define Scroll_128Frames		0x02
#define Scroll_256Frames		0x03

// address setting
#define SETLOWCOLUMN 				0x00
#define SETHIGHCOLUMN 			0x10
#define MEMORYMODE 					0x20
#define COLUMNADDRESS 			0x21
#define COLUMNADDRESS_MSB 	0x00
#define COLUMNADDRESS_LSB 	0x7F
#define PAGEADDRESS					0x22
#define PAGE_START_ADDRESS 	0xB0

// hardware configuration
#define SETSTARTLINE        0x40
#define SEGREMAP            0xA1
#define SETMULTIPLEX        0xA8
#define COMSCANINC          0xC0
#define COMSCANDEC          0xC8
#define SETDISPLAYOFFSET    0xD3
#define SETCOMPINS          0xDA

// timing and driving
#define SETDISPLAYCLOCKDIV  0xD5
#define SETPRECHARGE        0xD9
#define SETVCOMDETECT       0xDB
#define SETNOP                 0xE3

// power supply configuration
#define CHARGEPUMP          0x8D
#define EXTERNALVCC         0x10
#define SWITCHCAPVCC        0x20


#define FONT_6x8_WIDTH 			6
#define FONT_6x8_HEIGHT 		8

#define FONT_8x16_WIDTH 		8
#define FONT_8x16_HEIGHT 		16

static const unsigned char FONT6x8[] = 
{
	/* 6x8 font, each line is a character each byte is a one pixel wide column
	 * of that character. MSB is the top pixel of the column, LSB is the bottom
	 * pixel of the column. 0 = pixel off. 1 = pixel on. */

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // space
	0x00, 0x00, 0xFA, 0x00, 0x00, 0x00,  // !
	0x00, 0xE0, 0x00, 0xE0, 0x00, 0x00,  // "
	0x28, 0xFE, 0x28, 0xFE, 0x28, 0x00,  // #
	0x24, 0x54, 0xFE, 0x54, 0x48, 0x00,  // $
	0xC4, 0xC8, 0x10, 0x26, 0x46, 0x00,  // %
	0x6C, 0x92, 0x6A, 0x04, 0x0A, 0x00,  // &
	0x00, 0x10, 0xE0, 0xC0, 0x00, 0x00,  // '
	0x00, 0x38, 0x44, 0x82, 0x00, 0x00,  // (
	0x00, 0x82, 0x44, 0x38, 0x00, 0x00,  // )
	0x54, 0x38, 0xFE, 0x38, 0x54, 0x00,  // *
	0x10, 0x10, 0x7C, 0x10, 0x10, 0x00,  // +
	0x00, 0x02, 0x1C, 0x18, 0x00, 0x00,  // ,
	0x10, 0x10, 0x10, 0x10, 0x10, 0x00,  // -
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00,  // .
	0x04, 0x08, 0x10, 0x20, 0x40, 0x00,  // /
	//96 Bytes
	0x7C, 0x8A, 0x92, 0xA2, 0x7C, 0x00,  // 0
	0x00, 0x42, 0xFE, 0x02, 0x00, 0x00,  // 1
	0x42, 0x86, 0x8A, 0x92, 0x62, 0x00,  // 2
	0x84, 0x82, 0x92, 0xB2, 0xCC, 0x00,  // 3
	0x18, 0x28, 0x48, 0xFE, 0x08, 0x00,  // 4
	0xE4, 0xA2, 0xA2, 0xA2, 0x9C, 0x00,  // 5
	0x3C, 0x52, 0x92, 0x92, 0x0C, 0x00,  // 6
	0x82, 0x84, 0x88, 0x90, 0xE0, 0x00,  // 7
	0x6C, 0x92, 0x92, 0x92, 0x6C, 0x00,  // 8
	0x60, 0x92, 0x92, 0x94, 0x78, 0x00,  // 9
	0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // :
	0x00, 0x00, 0x02, 0x2C, 0x00, 0x00,  // ;
	0x00, 0x10, 0x28, 0x44, 0x82, 0x00,  // <
	0x28, 0x28, 0x28, 0x28, 0x28, 0x00,  // =
	0x00, 0x82, 0x44, 0x28, 0x10, 0x00,  // >
	0x40, 0x80, 0x8A, 0x90, 0x60, 0x00,  // ?
	//96*2 = 192 Bytes
	0x7C, 0x82, 0xBA, 0x9A, 0x72, 0x00,  // @
	0x3E, 0x48, 0x88, 0x48, 0x3E, 0x00,  // A
	0xFE, 0x92, 0x92, 0x92, 0x6C, 0x00,  // B
	0x7C, 0x82, 0x82, 0x82, 0x44, 0x00,  // C
	0xFE, 0x82, 0x82, 0x82, 0x7C, 0x00,  // D
	0xFE, 0x92, 0x92, 0x92, 0x82, 0x00,  // E
	0xFE, 0x90, 0x90, 0x90, 0x80, 0x00,  // F
	0x7C, 0x82, 0x92, 0x92, 0x5E, 0x00,  // G
	0xFE, 0x10, 0x10, 0x10, 0xFE, 0x00,  // H
	0x00, 0x82, 0xFE, 0x82, 0x00, 0x00,  // I
	0x04, 0x02, 0x82, 0xFC, 0x80, 0x00,  // J
	0xFE, 0x10, 0x28, 0x44, 0x82, 0x00,  // K
	0xFE, 0x02, 0x02, 0x02, 0x02, 0x00,  // L
	0xFE, 0x40, 0x38, 0x40, 0xFE, 0x00,  // M
	0xFE, 0x20, 0x10, 0x08, 0xFE, 0x00,  // N
	0x7C, 0x82, 0x82, 0x82, 0x7C, 0x00,  // O
	//96*3 = 288 Bytes
	0xFE, 0x90, 0x90, 0x90, 0x60, 0x00,  // P
	0x7C, 0x82, 0x8A, 0x84, 0x7A, 0x00,  // Q
	0xFE, 0x90, 0x98, 0x94, 0x62, 0x00,  // R
	0x64, 0x92, 0x92, 0x92, 0x4C, 0x00,  // S
	0x80, 0x80, 0xFE, 0x80, 0x80, 0x00,  // T
	0xFC, 0x02, 0x02, 0x02, 0xFC, 0x00,  // U
	0xF8, 0x04, 0x02, 0x04, 0xF8, 0x00,  // V
	0xFC, 0x02, 0x1C, 0x02, 0xFC, 0x00,  // W
	0xC6, 0x28, 0x10, 0x28, 0xC6, 0x00,  // X
	0xC0, 0x20, 0x1E, 0x20, 0xC0, 0x00,  // Y
	0x86, 0x8A, 0x92, 0xA2, 0xC2, 0x00,  // Z
	0x00, 0xFE, 0x82, 0x82, 0x82, 0x00,  // [
	0x40, 0x20, 0x10, 0x08, 0x04, 0x00,  //'\'
	0x00, 0x82, 0x82, 0x82, 0xFE, 0x00,  // ]
	0x20, 0x40, 0x80, 0x40, 0x20, 0x00,  // ^
	0x01, 0x01, 0x01, 0x01, 0x01, 0x00,  // _
	//96*4 = 384 Bytes
	0x00, 0xC0, 0xE0, 0x10, 0x00, 0x00,  // `
	0x04, 0x2A, 0x2A, 0x2A, 0x1E, 0x00,  // a
	0xFE, 0x14, 0x22, 0x22, 0x1C, 0x00,  // b
	0x1C, 0x22, 0x22, 0x22, 0x14, 0x00,  // c
	0x1C, 0x22, 0x22, 0x14, 0xFE, 0x00,  // d
	0x1C, 0x2A, 0x2A, 0x2A, 0x18, 0x00,  // e
	0x00, 0x10, 0x7E, 0x90, 0x40, 0x00,  // f
	0x18, 0x25, 0x25, 0x25, 0x3E, 0x00,  // g
	0xFE, 0x10, 0x20, 0x20, 0x1E, 0x00,  // h
	0x00, 0x22, 0xBE, 0x02, 0x00, 0x00,  // i
	0x00, 0x04, 0x02, 0x02, 0xBC, 0x00,  // j
	0x00, 0xFE, 0x08, 0x14, 0x22, 0x00,  // k
	0x00, 0x82, 0xFE, 0x02, 0x00, 0x00,  // l
	0x3E, 0x20, 0x1E, 0x20, 0x1E, 0x00,  // m
	0x3E, 0x10, 0x20, 0x20, 0x1E, 0x00,  // n
	0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00,  // o
	//96*5 = 480 Bytes
	0x3F, 0x18, 0x24, 0x24, 0x18, 0x00,  // p
	0x18, 0x24, 0x24, 0x18, 0x3F, 0x00,  // q
	0x3E, 0x10, 0x20, 0x20, 0x10, 0x00,  // r
	0x12, 0x2A, 0x2A, 0x2A, 0x24, 0x00,  // s
	0x20, 0x20, 0xFC, 0x22, 0x24, 0x00,  // t
	0x3C, 0x02, 0x02, 0x04, 0x3E, 0x00,  // u
	0x38, 0x04, 0x02, 0x04, 0x38, 0x00,  // v
	0x3C, 0x02, 0x0C, 0x02, 0x3C, 0x00,  // w
	0x22, 0x14, 0x08, 0x14, 0x22, 0x00,  // x
	0x32, 0x09, 0x09, 0x09, 0x3E, 0x00,  // y
	0x22, 0x26, 0x2A, 0x32, 0x22, 0x00,  // z
	0x00, 0x10, 0x6C, 0x82, 0x00, 0x00,  // {
	0x00, 0x00, 0xEE, 0x00, 0x00, 0x00,  // |
	0x00, 0x82, 0x6C, 0x10, 0x00, 0x00,  // }
	0x40, 0x80, 0x40, 0x20, 0x40, 0x00,  // ~
	0x00, 0x60, 0x90, 0x90, 0x60, 0x00,  // degrees symbol
	//96*6 = 576 Bytes
	//Special Characters ** NON-ASCII **
	0x00, 0x00, 0xFE, 0x82, 0x82, 0x82,  // [
	0x82, 0x82, 0x82, 0xFE, 0x00, 0x00  // ]
};

static const unsigned char FONT8x16[] = 
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //" ",0
	0x00, 0x00, 0x0E, 0x1F, 0x1F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xB0, 0x00, 0x00, 0x00,  //"!",1
	0x00, 0x1C, 0x1C, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //""",2
	0x00, 0x04, 0x1F, 0x1F, 0x04, 0x1F, 0x1F, 0x04, 0x00, 0x40, 0xF0, 0xF0, 0x40, 0xF0, 0xF0, 0x40,  //"#",3
	0x00, 0x0C, 0x1E, 0x73, 0x71, 0x18, 0x08, 0x00, 0x00, 0x20, 0x30, 0x1C, 0x9C, 0xF0, 0x60, 0x00,  //"$",4
	0x18, 0x3C, 0x24, 0x3D, 0x1B, 0x06, 0x0C, 0x00, 0x00, 0x60, 0xC0, 0xB0, 0x78, 0x48, 0x78, 0x30,  //"%",5
	0x00, 0x0D, 0x1F, 0x12, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x90, 0xE0, 0xF0, 0x90,  //"&",6
	0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //"'",7
	0x00, 0x00, 0x03, 0x0F, 0x1C, 0x10, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0x1C, 0x04, 0x00, 0x00,  //"(",8
	0x00, 0x00, 0x10, 0x1C, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1C, 0xF8, 0xE0, 0x00, 0x00,  //")",9
	0x00, 0x01, 0x05, 0x07, 0x03, 0x07, 0x05, 0x01, 0x00, 0x00, 0x40, 0xC0, 0x80, 0xC0, 0x40, 0x00,  //"*",10
	0x00, 0x01, 0x01, 0x07, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00,  //"+",11
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3C, 0x38, 0x00, 0x00,  //",",12
	0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //"-",13
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x00, 0x00,  //".",14
	0x00, 0x00, 0x00, 0x01, 0x07, 0x1E, 0x18, 0x00, 0x00, 0x18, 0x78, 0xE0, 0x80, 0x00, 0x00, 0x00,  //"/",15
	0x00, 0x00, 0x0F, 0x1F, 0x10, 0x16, 0x1F, 0x0F, 0x00, 0x00, 0xE0, 0xF0, 0xD0, 0x10, 0xF0, 0xE0,  //"0",16
	0x00, 0x04, 0x04, 0x0C, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00,  //"1",17
	0x00, 0x0C, 0x1C, 0x10, 0x11, 0x1F, 0x0E, 0x00, 0x00, 0x30, 0x70, 0xD0, 0x90, 0x10, 0x10, 0x00,  //"2",18
	0x00, 0x0C, 0x1C, 0x11, 0x11, 0x1F, 0x0E, 0x00, 0x00, 0x60, 0x70, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"3",19
	0x00, 0x00, 0x1F, 0x1F, 0x00, 0x07, 0x07, 0x00, 0x00, 0xC0, 0xC0, 0x40, 0x40, 0xF0, 0xF0, 0x40,  //"4",20
	0x00, 0x1F, 0x1F, 0x11, 0x11, 0x11, 0x10, 0x00, 0x00, 0x10, 0x10, 0x10, 0x30, 0xE0, 0xC0, 0x00,  //"5",21
	0x00, 0x03, 0x07, 0x1E, 0x1A, 0x13, 0x01, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"6",22
	0x00, 0x10, 0x10, 0x11, 0x17, 0x1E, 0x18, 0x00, 0x00, 0x00, 0x70, 0xF0, 0x80, 0x00, 0x00, 0x00,  //"7",23
	0x00, 0x0E, 0x1F, 0x13, 0x11, 0x1F, 0x0E, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x90, 0xF0, 0xE0, 0x00,  //"8",24
	0x00, 0x0F, 0x1F, 0x10, 0x10, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x90, 0xB0, 0xF0, 0xC0, 0x80, 0x00,  //"9",25
	0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x00, 0x00,  //":",26
	0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3C, 0x38, 0x00, 0x00,  //";",27
	0x00, 0x01, 0x03, 0x06, 0x0C, 0x18, 0x10, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x10, 0x00,  //"<",28
	0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,  //"=",29
	0x00, 0x10, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00, 0x00, 0x10, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00,  //">",30
	0x00, 0x0C, 0x1C, 0x11, 0x13, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xB0, 0x00, 0x00, 0x00,  //"?",31
	0x0F, 0x1F, 0x10, 0x11, 0x13, 0x12, 0x1F, 0x0F, 0xE0, 0xF0, 0x10, 0x90, 0xD0, 0x50, 0xD0, 0xD0,  //"@",32
	0x00, 0x07, 0x0F, 0x18, 0x18, 0x0F, 0x07, 0x00, 0x00, 0xF0, 0xF0, 0x80, 0x80, 0xF0, 0xF0, 0x00,  //"A",33
	0x00, 0x1F, 0x1F, 0x11, 0x11, 0x1F, 0x0E, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"B",34
	0x00, 0x0F, 0x1F, 0x10, 0x10, 0x1C, 0x0C, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0x70, 0x60, 0x00,  //"C",35
	0x00, 0x1F, 0x1F, 0x10, 0x18, 0x0F, 0x07, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x30, 0xE0, 0xC0, 0x00,  //"D",36
	0x00, 0x1F, 0x1F, 0x11, 0x11, 0x11, 0x10, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x00,  //"E",37
	0x00, 0x1F, 0x1F, 0x11, 0x11, 0x11, 0x10, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,  //"F",38
	0x00, 0x0F, 0x1F, 0x10, 0x10, 0x1C, 0x0C, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x90, 0xF0, 0xF0, 0x00,  //"G",39
	0x00, 0x1F, 0x1F, 0x01, 0x01, 0x1F, 0x1F, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0xF0, 0x00,  //"H",40
	0x00, 0x00, 0x10, 0x1F, 0x1F, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0xF0, 0xF0, 0x10, 0x00, 0x00,  //"I",41
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x60, 0x70, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"J",42
	0x00, 0x1F, 0x1F, 0x01, 0x07, 0x1E, 0x18, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0xC0, 0xF0, 0x30, 0x00,  //"K",43
	0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0x10, 0x10, 0x00,  //"L",44
	0x00, 0x1F, 0x1F, 0x04, 0x03, 0x04, 0x1F, 0x1F, 0x00, 0xF0, 0xF0, 0x00, 0x80, 0x00, 0xF0, 0xF0,  //"M",45
	0x00, 0x1F, 0x1F, 0x06, 0x03, 0x01, 0x1F, 0x1F, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x80, 0xF0, 0xF0,  //"N",46
	0x00, 0x0F, 0x1F, 0x10, 0x10, 0x1F, 0x0F, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"O",47
	0x00, 0x1F, 0x1F, 0x11, 0x11, 0x1F, 0x0E, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,  //"P",48
	0x00, 0x0F, 0x1F, 0x10, 0x10, 0x1F, 0x0F, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x18, 0xFC, 0xE4, 0x00,  //"Q",49
	0x00, 0x1F, 0x1F, 0x11, 0x11, 0x1F, 0x0E, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x80, 0xF0, 0x70, 0x00,  //"R",50
	0x00, 0x0C, 0x1E, 0x13, 0x11, 0x18, 0x08, 0x00, 0x00, 0x20, 0x30, 0x10, 0x90, 0xF0, 0x60, 0x00,  //"S",51
	0x00, 0x10, 0x10, 0x1F, 0x1F, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00,  //"T",52
	0x00, 0x1F, 0x1F, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"U",53
	0x00, 0x1F, 0x1F, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0x30, 0xE0, 0xC0, 0x00,  //"V",54
	0x00, 0x1F, 0x1F, 0x00, 0x03, 0x00, 0x1F, 0x1F, 0x00, 0x80, 0xF0, 0x70, 0x80, 0x70, 0xF0, 0x80,  //"W",55
	0x00, 0x18, 0x1C, 0x07, 0x03, 0x1C, 0x18, 0x00, 0x00, 0x70, 0xF0, 0x00, 0x80, 0xF0, 0x70, 0x00,  //"X",56
	0x00, 0x1E, 0x1F, 0x01, 0x01, 0x1F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00,  //"Y",57
	0x00, 0x10, 0x10, 0x11, 0x13, 0x1E, 0x1C, 0x00, 0x00, 0x70, 0xF0, 0x90, 0x10, 0x10, 0x10, 0x00,  //"Z",58
	0x00, 0x00, 0x1F, 0x1F, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x02, 0x02, 0x00, 0x00,  //"[",59
	0x00, 0x18, 0x1E, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x78, 0x18, 0x00,  //"\",60
	0x00, 0x00, 0x10, 0x10, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0xFE, 0xFE, 0x00, 0x00,  //"]",61
	0x00, 0x10, 0x30, 0x60, 0x60, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //"^",62
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //"_",63
	0x00, 0x00, 0x40, 0x60, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //"`",64
	0x00, 0x00, 0x04, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0x60, 0xF0, 0x90, 0x90, 0xF0, 0xF0, 0x00,  //"a",65
	0x00, 0x1F, 0x1F, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0xF0, 0xF0, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"b",66
	0x00, 0x03, 0x07, 0x04, 0x04, 0x06, 0x02, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0x30, 0x20, 0x00,  //"c",67
	0x00, 0x03, 0x07, 0x04, 0x04, 0x1F, 0x1F, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x00,  //"d",68
	0x00, 0x03, 0x07, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0xE0, 0xF0, 0x90, 0x90, 0x90, 0x80, 0x00,  //"e",69
	0x00, 0x01, 0x0F, 0x1F, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00,  //"f",70
	0x00, 0x03, 0x07, 0x04, 0x04, 0x07, 0x07, 0x00, 0x00, 0xE2, 0xF2, 0x12, 0x12, 0xFE, 0xFC, 0x00,  //"g",71
	0x00, 0x1F, 0x1F, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0xF0, 0x00,  //"h",72
	0x00, 0x04, 0x04, 0x37, 0x37, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0x00,  //"i",73
	0x00, 0x00, 0x04, 0x04, 0x37, 0x37, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0xFE, 0xFC, 0x00, 0x00,  //"j",74
	0x00, 0x1F, 0x1F, 0x00, 0x01, 0x07, 0x06, 0x00, 0x00, 0xF0, 0xF0, 0x80, 0xC0, 0x70, 0x30, 0x00,  //"k",75
	0x00, 0x10, 0x10, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0xF0, 0xF0, 0x10, 0x10, 0x00,  //"l",76
	0x00, 0x07, 0x07, 0x04, 0x07, 0x04, 0x07, 0x03, 0x00, 0xF0, 0xF0, 0x00, 0xE0, 0x00, 0xF0, 0xF0,  //"m",77
	0x00, 0x07, 0x07, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0xF0, 0xF0, 0x00,  //"n",78
	0x00, 0x03, 0x07, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"o",79
	0x00, 0x07, 0x07, 0x04, 0x04, 0x07, 0x03, 0x00, 0x00, 0xFE, 0xFE, 0x10, 0x10, 0xF0, 0xE0, 0x00,  //"p",80
	0x00, 0x03, 0x07, 0x04, 0x04, 0x07, 0x07, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xFE, 0xFE, 0x00,  //"q",81
	0x00, 0x07, 0x07, 0x01, 0x02, 0x06, 0x06, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,  //"r",82
	0x00, 0x03, 0x07, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x10, 0x90, 0x90, 0x90, 0xF0, 0x60, 0x00,  //"s",83
	0x00, 0x04, 0x1F, 0x1F, 0x04, 0x04, 0x04, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0x10, 0x00,  //"t",84
	0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0xE0, 0xF0, 0x10, 0x10, 0xF0, 0xF0, 0x00,  //"u",85
	0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0xC0, 0xE0, 0x30, 0x30, 0xE0, 0xC0, 0x00,  //"v",86
	0x00, 0x07, 0x07, 0x00, 0x03, 0x00, 0x07, 0x07, 0x00, 0xC0, 0xF0, 0x30, 0xC0, 0x30, 0xF0, 0xC0,  //"w",87
	0x00, 0x06, 0x07, 0x01, 0x01, 0x07, 0x06, 0x00, 0x00, 0x30, 0x70, 0xC0, 0xC0, 0x70, 0x30, 0x00,  //"x",88
	0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x00, 0x02, 0xE2, 0xF2, 0x16, 0x1C, 0xF8, 0xE0, 0x00,  //"y",89
	0x00, 0x04, 0x04, 0x04, 0x05, 0x07, 0x06, 0x00, 0x00, 0x30, 0x70, 0xD0, 0x90, 0x10, 0x10, 0x00,  //"z",90
	0x00, 0x00, 0x01, 0x0F, 0x1E, 0x10, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x78, 0x3C, 0x04, 0x00, 0x00,  //"{",91
	0x00, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00,  //"|",92
	0x00, 0x00, 0x10, 0x1E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x3C, 0x78, 0xC0, 0x80, 0x00,  //"}",93
	0x0C, 0x18, 0x10, 0x18, 0x0C, 0x04, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //"~",94

};


class OLED: public Stream
{
	private:

		uint8_t curType;
		uint8_t curFont;
		uint8_t curRow;
		uint8_t curCol;
		uint8_t curClsLine;

		// private methods
		inline void recv()__attribute__((__always_inline__));

	public:
		// public methods
		OLED(uint8_t type = OLED_096);
		~OLED();
		void begin(uint8_t font);

		void WriteByte(byte ucData);
		void SendCommand(byte *data, byte i);
		void SendData(byte *data, byte i);
		void setAddress(byte page, byte column);
		void clearScreen(void);
		void clearLine(byte row);
		void setBrightness(byte Brightness);

		void ScharDraw(byte row, byte column, byte data);
		void Sprint(byte row, byte column, byte *word);
		void LcharDraw(byte row, byte column, byte data);
		void Lprint(byte row, byte column, byte *word);

		void pixelDraw(byte x, byte y);
		void horizontalLine(byte xStart, byte xStop, byte y);
		void verticalLine(byte x, byte yStart, byte yStop);
		void imageDraw(const byte IMAGE[], byte row, byte column);

		void circleDraw(int x, int y, int r);
		void boxDraw(byte x, byte y, byte w, byte h);
		void drawLine(byte x0, byte y0, byte x1, byte y1);

		void BlinkON(void);
		void BlinkOFF(void);

		void Scroll_Display_Left(uint8_t Xstart, uint8_t Xstop);
		void Scroll_Display_Right(uint8_t Xstart, uint8_t Xstop);
		void ScrollStop(void);

		void Set_Contrast_Control(byte d);
		void Set_Inverse_Display(byte d);
		void Set_Display_On_Off(byte d);


		void Fill_RAM(byte data);
		void Fill_RAM_PAGE(byte page, byte data);

		void setFont(uint8_t fontsize);
		void setPosi(uint8_t row, uint8_t column);
		void Swap(byte *x, byte *y);

		virtual size_t write(uint8_t byte);
		virtual int peek();
		virtual int read();
		virtual int available();
		virtual void flush();
		operator bool()
		{
				return true;
		}

		using Print::write;

};

#endif
